[{"content":"Adapting to a Hybrid Workforce with 1E\u0026rsquo;s Tachyon Product Beginning in early 2021, there has been a trending increase in the number of people that are quitting their jobs due to what seems to be a direct result of the COVID-19 pandemic. This trend, primarily in the United States, has been termed the Great Resignation, with four million Americans resigning in April alone.\nFor some, illness directly related to COVID-19 may be why we’re seeing this shift to resigning, and for others, it may be the desire to find a new job that fits the new lifestyle that they have been forced to adopt. Whatever the case, organizations must take note and learn with the changing times. 1E seems to be tuned to this new environment with their new Tachyon v8 “experience management” product.\nFour Remote Work Scenarios with 1E’s Tachyon I recently watched a webinar put on by 1E about their new Tachyon v8 product by 1E\u0026rsquo;s Chief Product Technologist, Bogdan Udrea, and Director of Product Marketing, Michael Wright. In the webinar, they outlined the key focus points on the latest release of the product called Analytics and Insights, Resolution Acceleration, Action \u0026amp; Prevention, and Engagement \u0026amp; Empowerment.\nThese four areas are geared toward allowing the company to \u0026ldquo;focus on what matters most\u0026rdquo;; user experience. When a company decides to adopt a hybrid, work from anywhere, or fully remote approach, the success rides heavily on the employees\u0026rsquo;\u0026rsquo; experience that accompanies the many new challenges to be faced.\nTachyon sets to answer questions like; what happens when a new application needs to be rolled out company-wide? How will the employees react? What app are they currently using and what impact will there be if it is replaced? How was the roll-out received?\nLaunching an Employee Wellbeing Campaign With a workforce that is no longer in a central location, it is difficult to identify the overall experience and well-being of employees. This metric is a crucial aspect of maintaining a productive and successful culture and Tachyon v8 is set to take it on.\nTachyon v8 not only aggregates metrics from the environment, such as:\nThe amount of time employees spend on their machines each day How long it takes applications to load How the network is performing But it also allows the company to use these metrics to build meaningful wellness campaigns. As an example, perhaps Tachyon’s reports are finding that employees are consistently working several hours more per day than the rest? What is causing this?\nDo employees lack understanding of a process or application? Is the equipment functioning as expected? Are they simply working more because they desire to? Wellness campaigns like the example above allow the company to stay involved and be able to send simple feedback requests from employees such as \u0026ldquo;Hey John, we noticed that you have been working several extra hours per day this month. Is everything going okay?\u0026rdquo; This may help the employee feel more involved and allow the company to fill a gap they didn\u0026rsquo;t know existed.\nExecuting a New Software Rollout Adoption Plan Nobody likes change (most people anyway). This often remains true when a company decides to roll-out a new product to everyone, especially if it is a replacement to an existing product.\nTo build positive expectations, Tachyon v8 helps identify employees that are using certain software which it can then send announcements and surveys to prepare them for an upgrade or changes that might affect their productivity.\nMeasuring user sentiment with Tachyon v8 allows organizations to identify \u0026ldquo;champions\u0026rdquo; and \u0026ldquo;detractors\u0026rdquo;; employees that are excelling with the software or those struggling. These metrics can be used in future campaigns by providing different on-boarding approaches based on the identified personas. \u0026ldquo;Champions\u0026rdquo; may get first-look at the new tool and provide feedback that will help encourage the adoption by the \u0026ldquo;detractors\u0026rdquo;.\nRefreshing Large Groups of Devices A typical scenario that is often experienced in any environment is the need to \u0026ldquo;reset\u0026rdquo; or \u0026ldquo;restart\u0026rdquo; a device or service that may impact the end-user due to a recent change or issue. Care must be made to ensure everyone isn\u0026rsquo;t affected at the same time, or worse, the issue is made worse.\nTachyon relies heavily on the metrics collected in the environment and can help identify who is affected most or which groups of people can be used to stage the refresh. The company can create managed groups within the platform and associate them as \u0026ldquo;Power Users\u0026rdquo; who receive the refresh first. Again, collecting feedback for use on the rest of the project.\nLeveraging Self-Service to Give the Employee More Control Self-service is an empowering component of Tachyon v8 as it allows the employee to feel involved in software decisions. Rather than forcing a change upon them, or requiring them to always rely upon the helpdesk to resolve an issue, Tachyon puts some of these actions in the employees hands, at their leisure.\nFor example, lets say the company is rolling out that new application. Rather than forcing the application install at a specific time, Tachyon 8 allows the user to choose the time that is convenient for them. This action would be made available and easily accessible within the agent running on the machine.\nAlong the same lines, what if the application is having issues running or is slow to connect to an API, etc.? There may be some self-service actions available to the end-user where they can request the app be refreshed, reloaded, etc. Again, empowering the employee so that the feel more empowered and not reliant on someone else when they are working remotely.\nConclusion Overall, I think the approach that Tachyon v8 has taken to ensure that the employee experience is top-notch. The metrics-driven approach is key to building a thriving business despite the many uncertain factors that have come into play over the past two years.\nOrganizations are only going to continue to adopt the “work from anywhere” motto. The longer it takes companies to embrace this (for businesses that don\u0026rsquo;t rely on an in-person presence) the more difficult it is going to be. Tachyon v8 is platform that has many component that may help fill the gaps needed to encourage their success.\nMore Info Product Website\n","permalink":"http://localhost:1313/home/posts/techyon-1e-review/","summary":"\u003ch1 id=\"adapting-to-a-hybrid-workforce-with-1es-tachyon-product\"\u003eAdapting to a Hybrid Workforce with 1E\u0026rsquo;s Tachyon Product\u003c/h1\u003e\n\u003cp\u003eBeginning in early 2021, there has been a trending increase in the number of people that are quitting their jobs due to what seems to be a direct result of the COVID-19 pandemic. This trend, primarily in the United States, has been termed the \u003ca href=\"https://en.wikipedia.org/wiki/Great_Resignation\"\u003eGreat Resignation\u003c/a\u003e, with \u003ca href=\"https://en.wikipedia.org/wiki/Great_Resignation\"\u003efour million\u003c/a\u003e Americans resigning in April alone.\u003c/p\u003e\n\u003cp\u003eFor some, illness directly related to COVID-19 may be why we’re seeing this shift to resigning, and for others, it may be the desire to find a new job that fits the new lifestyle that they have been forced to adopt. Whatever the case, organizations must take note and learn with the changing times. 1E seems to be tuned to this new environment with their new Tachyon v8 “experience management” product.\u003c/p\u003e","title":"Adapting to a Hybrid Workforce with 1E's Tachyon 8 Product"},{"content":"Introduction Recently, I was working on a PowerShell scripts that I wanted to share with others on my team but did not want to commit it to our Git repository with the customizable variables declared in the code (Always best practice. Keep the sensitives out of repos!). Instead, I wanted to implement a way to have a config file where these configurable variables can be set and the main script would load them when launched. A quick \u0026ldquo;DuckDuckGo\u0026rdquo; search led to many others that have had the same goal but I didn\u0026rsquo;t find one that really worked like I had intended. Here are my steps that I used to accomplish what I had in mind.\nThe config file I simply wanted a config file that mimicked what we typically see in a Docker .env file. Each line consists of a variable name and value (key-value pair) in the format \u0026lt;key\u0026gt;=\u0026lt;value\u0026gt;.\nHere is an example of what that file may look like.\nLISTENIP=0.0.0.0 LISTENPORT=8443 APPID=1cb8ea0e-fa15-47b2-9bd5-957117c01678 OU=OU=Users,DC=Corp,DC=com This aproach provides a very simple layout that is easily recognized and can be repeated without looking back and thinking \u0026ldquo;how did I set that up again?\u0026rdquo;.\nThe PowerShell Code The code snippet to retieve the values and set the variables consists of the following:\nForeach loop to process each line of the file Splits the pair at the first \u0026ldquo;=\u0026rdquo; character Sets a variable based on the Name and Value parsed out of each line Foreach ($i in $(Get-Content script.conf)){ Set-Variable -Name $i.split(\u0026#34;=\u0026#34;)[0] -Value $i.split(\u0026#34;=\u0026#34;,2)[1] } The first line begins the loop with Foreach ($i in $(Get-Content script.conf)){ which pulls in the content of the config file and sets the current line to the value $i.\nFor each line we use the split method to pull apart the key/value pair and will use that information to declare the variable.\n$i.split(\u0026quot;=\u0026quot;)[0] splits the line up into parts using the \u0026ldquo;=\u0026rdquo; as a delimiter and selects the first part in the list ([0]).\nTypically, each line will only contain one \u0026ldquo;=\u0026rdquo; sign but in some cases this may not be true. One example that I came across was when working with Active Directory DistinguishedNames such as \u0026ldquo;OU=Users,DC=contoso,DC=com\u0026rdquo;. This would allow the name to be parsed but would split the remaining content of the line into additional parts depending on the number of \u0026ldquo;=\u0026rdquo; it contained. \u0026ldquo;DISTINGUISHEDNAME=OU=Users,DC=contoso,DC=com\u0026rdquo; would become:\nDISTINGUISHEDNAME OU Users contoso com But, what we want are the two parts to be:\nDISTINGUISHEDNAME OU=Users=contoso=com This is why the value is determined via $i.split(\u0026quot;=\u0026quot;,2)[1]. The addition of the \u0026ldquo;2\u0026rdquo; after specifiying our delimeter is telling PowerShell to return a maximium of two substrings. So regardless of the amount of \u0026ldquo;=\u0026rdquo; signs in the string it will only split on the first one, returning a name (before the first \u0026ldquo;=\u0026rdquo;) and a value (after the first \u0026ldquo;=\u0026rdquo;).\nThe [1] is used to select the second value in the list and set that as the value of the variable.\nPutting it to use Now that we have the structure in place, lets put it into practice and see what the it looks like all tied together.\nOur scenario will be I am writing a simple PowerShell script to call a webservice and it requires an API key and a special User-Agent in the HTTP header. Once the script is complete I want to share this with the community but I don\u0026rsquo;t want my API key and User-Agent values included in the script.\nCreate the script This script makes a GET request against https://swapi.co, a popular Star Wars API, to find intersting details about a specified starship seen in the films.\nscript.conf We will only be working with two values in the config file. The APIKEY and the USERAGENT.\nAPIKEY=R2D2C3P0BB8 USERAGENT=\u0026#39;Luke-SkyWalker\u0026#39; Get-DeathStar.ps1 The main script uses the snippet shown above to pull in the content of the script.conf file and sets the values accordingly.\nForeach ($i in $(Get-Content script.conf)){ Set-Variable -Name $i.split(\u0026#34;=\u0026#34;)[0] -Value $i.split(\u0026#34;=\u0026#34;,2)[1] } $Headers = @{ \u0026#39;APIKey\u0026#39; = $APIKEY \u0026#39;User-Agent\u0026#39; = $USERAGENT \u0026#39;Content-Type\u0026#39; = \u0026#39;application/json\u0026#39; } $Url = \u0026#39;https://swapi.co/api/starships/9/\u0026#39; Invoke-RestMethod -Method GET -Uri $Url -Headers $Headers If we inspect the request with a tool such as Fiddler4 we can see our custom values being passed in the header.\nGET https://swapi.co/api/starships/9/ HTTP/1.1 Content-Type: application/json APIKey: R2D2C3P0BB8 User-Agent: \u0026#39;Luke-SkyWalker\u0026#39; Host: swapi.co Connection: Keep-Alive Using with Git Now that we have the two components working together how do we address the concens with sharing via Git?\nFirst, we need to initialize the directory as a Git repository and set the origin.\ngit init git remote add origin https://github.com/arnydo/get-deathstar.git Then, we need to create a new file named .gitignore. This is where we place regex patterns of anything we do not want to be included when we push this git repo.\nOur .gitignore will include the following:\n*.conf This tells git to not include any files that have the .conf extension.\nTo be sure that others who may use this repo understand how to setup the config file for their use, we can create a new file named script.cong.example that only contains that variable names that are expected.\nAPIKEY= USERAGENT= The README.md could mention the need to copy the script.conf.example to a new file named script.conf.\n## Before running script Be sure to copy the script.conf.example file to script.conf and add your custom values before running the get-deathstar.ps1 script. Now, with everything setup we can push our new repository to Github and it will not include our sensitive data.\ngit add . git commit -m \u0026#34;Initial commit\u0026#34; git push -u origin master And that is it! I hope you found this helpful. If you have any questions or ideas for improvement please leave a comment.\nSee you next time.\n","permalink":"http://localhost:1313/home/posts/powershell-script-config-file/","summary":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eRecently, I was working on a PowerShell scripts that I wanted to share with others on my team but did not want to commit it to our Git repository with the customizable variables declared in the code (Always best practice. Keep the sensitives out of repos!). Instead, I wanted to implement a way to have a config file where these configurable variables can be set and the main script would load them when launched. A quick \u0026ldquo;DuckDuckGo\u0026rdquo; search led to many others that have had the same goal but I didn\u0026rsquo;t find one that really worked like I had intended. Here are my steps that I used to accomplish what I had in mind.\u003c/p\u003e","title":"Creating a Config File for your PowerShell Scripts"},{"content":"Introduction Hey! Kyle here. I recently released a small update to one of the PowerShell modules I put together to interact with EmailRep\u0026rsquo;s API and thought I would share a little about what it is and why I built it.\nGithub PowerShellGallery First of all, if you work in Information Security or IT in general, be sure to check out EmailRep.io. This is an excellent service built by a great group of people to provide enrichment data about an email address. Nearly all of our online interactions these days link back to an email address and it is important that we observe the \u0026ldquo;reputation\u0026rdquo; of email addresses that are used to interact with our systems.\nHere is a brief description of EmailRep by the EmailRep team:\nEmailRep uses hundreds of factors like domain age, traffic rankings, presence on social media sites, professional networking sites, personal connections, public records, deliverability, data breaches, dark web credential leaks, phishing emails, threat actor emails, and more to answer these types of questions:\nIs this email risky? Is this a throwaway account? What kind of online presence does this email have? Is this a trustworthy sender? PSEmailRep Goals After using EmailRep for a short time I quickly realized the value that it would add to my daily routines of triaging phishing emails and maintaing the many security aspects of our environment. With PowerShell being my daily-driver for automation and security tools I decided to put together a module that would interact with the EmailRep API. Seeing that nobody else at the time had been working on one I figured it would be a good project to start and share with the community. Some of the things that I was looking to accomplish were:\nMaintained in a Github repo Published to PowerShellGallery Helpful documentation on the available features Deployment pipeline Keep an eye out for a follow-up post on how I tackled these points. I learned a ton about building a module template with Plaster, running various checks with Pester, and preparing it to be pushed out to a central repository such as PowerShellGallery with PSDeploy.\nThe Module The goal of the PowerShell module isn\u0026rsquo;t to recreate the wheel, rather, simply take advantage of what is already available. The only thing I needed to do was to find a way to streamline it into my daily routines. The obvious choice for me was a PowerShell module\u0026hellip;because\u0026hellip;PowerShell! The available functions mimick what is currently available in the API Docs and as new endpoints are added more functions may be added to the module. Here are the current functions and what they are used for.\nPS\u0026gt; Get-EmailRep ❯ Get-EmailRep bill@microsoft.com email : bill@microsoft.com reputation : high suspicious : False references : 85 blacklisted : False malicious_activity : False malicious_activity_recent : False credentials_leaked : True credentials_leaked_recent : False data_breach : True first_seen : 07/01/2008 last_seen : 10/16/2019 domain_exists : True domain_reputation : high new_domain : False days_since_domain_creation : 10512 suspicious_tld : False spam : False free_provider : False disposable : False deliverable : True accept_all : True valid_mx : True spoofable : False spf_strict : True dmarc_enforced : True profiles : {twitter, vimeo, pinterest, angellist...} This function does a GET query against the EmailRep API to collect what is already known, if anything, about the email address. In this case, bill@microsoft.com has several different peices of enrichment data that could help determine the reputation of the address. Now, most of this information is simply information and it is up to you to determine what you do with that information. In this case, EmailRep believes the reputation of this address to be \u0026ldquo;high\u0026rdquo;, but that does not mean that it is \u0026ldquo;good\u0026rdquo; or \u0026ldquo;trusted\u0026rdquo;. This simply means that there is enough information about address that it has a reputation.\nHow can I use this information?\nWell, lets take a look at the following:\nblacklisted : False malicious_activity : False malicious_activity_recent : False credentials_leaked : True credentials_leaked_recent : False data_breach : True This information indicates that while there are no reports of malicious activity on the account there are reports that it has been listed in recent breach reports or credential leaks. This is important to consider when allowing this account to interact with users in your environment or with your services. It is possible that the account is in possession of a malicious actor and does not have the best of intentions. This may trigger you to look further into the account or require additional verification before proceeding.\nThese indicators are what I find very useful when triaging phishing emails:\ndomain_exists : True domain_reputation : high new_domain : False days_since_domain_creation : 10512 A quick look at the domain details helps identify if this is a newly created domain and what the current reputation on that domain is. Often times, we will see that phishing emails are originating from domains that are only hours, or sometimes minutes, old. This typically an indicator of malicious activity.\nYou can take a look at the meaning of each attribute by heading over to the API Docs.\nPS\u0026gt; New-EmailRep This function is used to report email addresses to the EmailRep API. It does require an API key and you can request one over at EmailRep\u0026rsquo;s site.\nAn example report would look like:\nNew-EmailRep -Email bill@microsoft.com ` -Tags bec,credential_phishing ` -Description \u0026#39;Compromised account sending Sharepoint login page clone\u0026#39; ` -APIKey \u0026#39;4a534f4e20697320626574746572207468616e20584d4c21\u0026#39; This will report to EmailRep that bill@microsoft.com has been involved in a Business Email Compromise and is sending credential phishing via fake Sharepoint login pages.\nWhile the EmailRep API does not yet allow you to review these reports once they are submitted it is certainly on the road map. Having access to this data will greatly improve the accuracy of the determined \u0026lsquo;reputation\u0026rsquo; of the email address.\nPS\u0026gt; Set-EmailRep This function is used to save your API key to your user profile so you do not need to include it on every execution. Currently, this utilized PowerShell\u0026rsquo;s secure string capabilities to encrypt the key in an XML file for later retrieval (each time Get-EmailRep or New-EmailRep is called). This key can only be read by the user that set it thanks to Windows DPAPI. DPAPI is also a great topic to discuss. I learned a lot about how it is used and the risk it introduces\u0026hellip;but that is for another day.\nTo use set-emailrep simply run the command and enter in your APIKey. If you have previously ran this command it will alert you and ask if you would like to overwrite the existing entry.\nFinal Thoughts This has been a learning process and opened up many new rabbit holes to follow. I plan on continueing to share these as I tackle them. Hopefully somebody out there will find it useful. I know I wouldn\u0026rsquo;t be where I am at without the contributions that others have made to the community. It is by their encouragement that I want to share my experiences as well and return the favor. Let me know what you think and if you have any questions about PSEmailRep!\n","permalink":"http://localhost:1313/home/posts/psemailrep-module/","summary":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eHey! Kyle here. I recently released a small update to one of the PowerShell modules I put together to interact with EmailRep\u0026rsquo;s API and thought I would share a little about what it is and why I built it.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/arnydo/psemailrep\"\u003eGithub\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.powershellgallery.com/packages/psemailrep\"\u003ePowerShellGallery\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg alt=\"PSEmailRep\" loading=\"lazy\" src=\"https://github.com/arnydo/PSEmailRep/raw/master/Media/screenshot.png\"\u003e\u003c/p\u003e\n\u003cp\u003eFirst of all, if you work in Information Security or IT in general, be sure to check out \u003ca href=\"https://emailrep.io\"\u003eEmailRep.io\u003c/a\u003e. This is an excellent service built by a great group of people to provide enrichment data about an email address. Nearly all of our online interactions these days link back to an email address and it is important that we observe the \u0026ldquo;reputation\u0026rdquo; of email addresses that are used to interact with our systems.\u003c/p\u003e","title":"PSEmailRep PowerShell Module"}]